"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReport = void 0;
const fs_1 = __importDefault(require("fs"));
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importDefault(require("path"));
const date_fns_1 = require("date-fns");
const toSentenceCase_1 = require("../helpers/accessibilityLabel/toSentenceCase");
const generateReport = (report) => {
    let markdown = `# Accessibility Audit Report - ${(0, date_fns_1.format)(new Date(), 'dd MMMM yyyy')} \n\n`;
    if (report.length === 0) {
        markdown += "âœ… No missing accessibility labels or hints found.\n";
    }
    else {
        const groupedByFile = {};
        for (const entry of report) {
            if (!groupedByFile[entry.location]) {
                groupedByFile[entry.location] = [];
            }
            groupedByFile[entry.location].push(entry);
        }
        for (const [filePath, entries] of Object.entries(groupedByFile)) {
            markdown += `## ${filePath}\n\n`;
            for (const { type, tag, text } of entries) {
                const hasInvalidRole = type === 'accessibilityRole' && text.includes('@RN-AUDIT-ROLE');
                const isDynamic = /^\{.*\}$/.test(text);
                markdown += `- **\`<${tag}>\`** ${hasInvalidRole ? 'invalid' : 'missing'} \`${type}\`: added _${isDynamic || type === 'accessibilityRole' ? text : (0, toSentenceCase_1.toSentenceCase)(text)}_\n`;
            }
            markdown += `\n`;
        }
    }
    const timestamp = new Date()
        .toISOString()
        .replace(/T/, "-")
        .replace(/:/g, "")
        .replace(/\..+/, "");
    const reportsDir = path_1.default.resolve("./reports");
    fs_1.default.mkdirSync(reportsDir, { recursive: true });
    const filename = `audit-report-${timestamp}.md`;
    const filepath = path_1.default.join(reportsDir, filename);
    fs_1.default.writeFileSync(filepath, markdown);
    console.log(chalk_1.default.magenta(`ðŸ“„ Report saved to ${filepath}`));
};
exports.generateReport = generateReport;
//# sourceMappingURL=generateReport.js.map