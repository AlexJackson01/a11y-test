"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.auditAccessibilityLabels = void 0;
const chalk_1 = __importDefault(require("chalk"));
const auditImageLabels_1 = require("./auditImageLabels");
const auditViewLabels_1 = require("./auditViewLabels");
const auditTouchableLabels_1 = require("./auditTouchableLabels");
const constants_1 = require("../../constants");
const hasProp_1 = require("../hasProp");
const auditAccessibilityLabels = (tag, attributes, path, filePath, labelTargets, shouldFix, report, prComments) => {
    let labelResult = null;
    switch (true) {
        case tag === "Image":
            labelResult = (0, auditImageLabels_1.auditImageLabels)(attributes, path);
            break;
        case tag === "View":
            labelResult = (0, auditViewLabels_1.auditViewLabels)(tag, attributes, path);
            break;
        default:
            labelResult = (0, auditTouchableLabels_1.auditTouchableLabels)(tag, attributes, path);
    }
    const autoFixes = !labelResult?.text.includes(constants_1.labelCode);
    if (labelResult) {
        if (shouldFix && autoFixes) {
            labelTargets.push(labelResult);
            if (report) {
                report.push({
                    type: "accessibilityLabel",
                    tag,
                    text: labelResult.text,
                    location: filePath,
                });
            }
        }
        else {
            if (prComments &&
                !(0, hasProp_1.hasProp)("accessibilityLabel", attributes)) {
                prComments.push({
                    type: "accessibilityLabel",
                    tag,
                    line: labelResult.line,
                    text: labelResult.text,
                    location: filePath,
                });
                console.log(chalk_1.default.yellow(`ðŸŸ¡ ${filePath}: <${tag}> on line ${labelResult.line} missing accessibilityLabel`));
            }
        }
    }
};
exports.auditAccessibilityLabels = auditAccessibilityLabels;
//# sourceMappingURL=auditAccessibilityLabels.js.map