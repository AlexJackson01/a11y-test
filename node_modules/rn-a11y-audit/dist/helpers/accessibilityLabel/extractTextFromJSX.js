"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractTextFromJSX = void 0;
const t = __importStar(require("@babel/types"));
const generator_1 = __importDefault(require("@babel/generator"));
const extractTextFromJSX = (path) => {
    let label = "";
    path.traverse({
        JSXElement(innerPath) {
            const opening = innerPath.node.openingElement;
            if (!t.isJSXIdentifier(opening.name))
                return;
            const openingTag = opening.name.name;
            // Only inspect <Text> components
            if (openingTag === "Text") {
                const children = innerPath.node.children;
                for (const child of children) {
                    if (t.isJSXText(child)) {
                        // <Text>Hello</Text>
                        const trimmed = child.value.trim();
                        if (trimmed.length > 0) {
                            label = trimmed;
                            innerPath.stop();
                            break;
                        }
                    }
                    else if (t.isJSXExpressionContainer(child)) {
                        const expr = child.expression;
                        if (t.isIdentifier(expr)) {
                            // <Text>{variable}</Text>
                            label = `{${expr.name}}`;
                            innerPath.stop();
                            break;
                        }
                        else if (t.isStringLiteral(expr)) {
                            // <Text>{"Static string"}</Text>
                            label = expr.value;
                            innerPath.stop();
                            break;
                        }
                        else {
                            // Complex expressions (ternary, function call, member expr etc)
                            label = `{${(0, generator_1.default)(expr).code}}`;
                            innerPath.stop();
                            break;
                        }
                    }
                }
            }
        },
    });
    return label;
};
exports.extractTextFromJSX = extractTextFromJSX;
//# sourceMappingURL=extractTextFromJSX.js.map