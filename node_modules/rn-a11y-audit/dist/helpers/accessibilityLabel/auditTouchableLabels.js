"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.auditTouchableLabels = void 0;
const t = __importStar(require("@babel/types"));
const extractTextFromJSX_1 = require("./extractTextFromJSX");
const hasProp_1 = require("../hasProp");
const constants_1 = require("../../constants");
const generator_1 = __importDefault(require("@babel/generator"));
const isTouchable = (tag) => constants_1.touchables.includes(tag);
const auditTouchableLabels = (tag, attributes, path) => {
    if (!isTouchable(tag) || (0, hasProp_1.hasProp)("accessibilityLabel", attributes)) {
        return null;
    }
    const titleAttr = attributes.find((attr) => t.isJSXAttribute(attr) &&
        t.isJSXIdentifier(attr.name) &&
        attr.name.name === "title");
    let extractedText = null;
    if (titleAttr?.value) {
        const val = titleAttr.value;
        if (t.isStringLiteral(val)) {
            // title="Save"
            extractedText = val.value;
        }
        else if (t.isJSXExpressionContainer(val)) {
            const expr = val.expression;
            if (t.isIdentifier(expr)) {
                // title={title}
                extractedText = `{${expr.name}}`;
            }
            else {
                // title={props.title} / title={this.props.title} / title={func()} / title={tern ? ary : null}
                extractedText = `{${(0, generator_1.default)(expr).code}}`;
            }
        }
    }
    if (!extractedText) {
        extractedText = (0, extractTextFromJSX_1.extractTextFromJSX)(path) || constants_1.touchableLabelError;
    }
    return {
        tag,
        path,
        line: path.node.loc?.start.line || 0,
        text: extractedText,
    };
};
exports.auditTouchableLabels = auditTouchableLabels;
//# sourceMappingURL=auditTouchableLabels.js.map