"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.suggestRole = exports.suggestRoleFromFilename = exports.suggestRoleFromTagName = exports.isTopLevelJSX = void 0;
const t = __importStar(require("@babel/types"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("../../constants");
const ALLOWED_ROLES = new Set(Object.values(constants_1.roleMap));
const HEADER_KEYS = /(^h[1-6]$|header|heading|title)/i;
const isHeaderKey = (k) => HEADER_KEYS.test(k);
const isTopLevelJSX = (path) => !path.findParent((p) => p.isJSXElement());
exports.isTopLevelJSX = isTopLevelJSX;
const extractStyleRoleHint = (attributes) => {
    const styleAttr = attributes.find((attr) => t.isJSXAttribute(attr) &&
        t.isJSXIdentifier(attr.name) &&
        attr.name.name === "style");
    if (!styleAttr || !styleAttr.value)
        return null;
    // style="header"
    if (t.isStringLiteral(styleAttr.value)) {
        return isHeaderKey(styleAttr.value.value) ? "header" : null;
    }
    if (!t.isJSXExpressionContainer(styleAttr.value))
        return null;
    const expr = styleAttr.value.expression;
    // style={styles.header} | style={theme.title}
    if (t.isMemberExpression(expr) && t.isIdentifier(expr.property)) {
        return isHeaderKey(expr.property.name) ? "header" : null;
    }
    // style={"header"}
    if (t.isStringLiteral(expr)) {
        return isHeaderKey(expr.value) ? "header" : null;
    }
    // style={[styles.header, "title", styles.something]}
    if (t.isArrayExpression(expr)) {
        for (const el of expr.elements) {
            if (t.isMemberExpression(el) && t.isIdentifier(el.property)) {
                if (isHeaderKey(el.property.name))
                    return "header";
            }
            if (t.isStringLiteral(el) && isHeaderKey(el.value))
                return "header";
        }
    }
    // style={{ variant: 'heading' }} / { title: true }
    if (t.isObjectExpression(expr)) {
        for (const prop of expr.properties) {
            if (!t.isObjectProperty(prop))
                continue;
            const key = t.isIdentifier(prop.key)
                ? prop.key.name
                : t.isStringLiteral(prop.key)
                    ? prop.key.value
                    : "";
            if (key && isHeaderKey(key))
                return "header";
            if (t.isStringLiteral(prop.value) && isHeaderKey(prop.value.value)) {
                return "header";
            }
        }
    }
    return null;
};
const suggestRoleFromTagName = (tag) => {
    if (constants_1.roleMap[tag])
        return constants_1.roleMap[tag];
    const lower = tag.toLowerCase();
    if (constants_1.touchables.filter(tag => tag !== 'Button').includes(tag))
        return "button";
    if (/imagebutton|avatar/.test(lower))
        return "imagebutton";
    if (/checkbox/.test(lower))
        return "checkbox";
    if (/radio(?!group)/.test(lower))
        return "radio";
    if (/toggle(button)?|toggle/.test(lower))
        return "togglebutton";
    if (/dropdown|picker|combo/.test(lower))
        return "combobox";
    if (/progressbar|progress|spinner/.test(lower))
        return "progressbar";
    if (/search/.test(lower))
        return "search";
    if (/header|heading|title|^h[1-6]$/.test(lower))
        return "header";
    if (/toolbar/.test(lower))
        return "toolbar";
    if (/tab(?!list)/.test(lower))
        return "tab";
    if (/menu/.test(lower))
        return "menu";
    if (/summary/.test(lower))
        return "summary";
    if (/timer|countdown/.test(lower))
        return "timer";
    if (/link/.test(lower))
        return "link";
    if (/grid/.test(lower))
        return "grid";
    if (/list/.test(lower))
        return "list";
    if (/switch/.test(lower))
        return "switch";
    if (/image|icon/.test(lower))
        return "image";
    if (/slider|carousel/.test(lower))
        return "adjustable";
    if (/alert|toast/.test(lower))
        return "alert";
    return null;
};
exports.suggestRoleFromTagName = suggestRoleFromTagName;
const suggestRoleFromFilename = (filePath) => {
    if (!filePath)
        return null;
    const base = path_1.default.basename(filePath).toLowerCase();
    if (constants_1.touchables.filter(tag => tag !== 'Button').includes(base))
        return "button";
    if (/checkbox/.test(base))
        return "checkbox";
    if (/radio(?!group)/.test(base))
        return "radio";
    if (/dropdown|picker|combo/.test(base))
        return "combobox";
    if (/toggle(button)?|toggle/.test(base))
        return "togglebutton";
    if (/search/.test(base))
        return "search";
    if (/progressbar|progress|spinner/.test(base))
        return "progressbar";
    if (/header|heading|title|^h[1-6]/.test(base))
        return "header";
    if (/toolbar/.test(base))
        return "toolbar";
    if (/tab(?!list)/.test(base))
        return "tab";
    if (/menu/.test(base))
        return "menu";
    if (/summary/.test(base))
        return "summary";
    if (/timer|countdown/.test(base))
        return "timer";
    if (/link/.test(base))
        return "link";
    if (/grid/.test(base))
        return "grid";
    if (/list/.test(base))
        return "list";
    if (/switch/.test(base))
        return "switch";
    if (/image|icon/.test(base))
        return "image";
    if (/slider|carousel/.test(base))
        return "adjustable";
    if (/alert|toast/.test(base))
        return "alert";
    return null;
};
exports.suggestRoleFromFilename = suggestRoleFromFilename;
const suggestRole = (tag, attributes) => {
    const candidate = (0, exports.suggestRoleFromTagName)(tag) ?? extractStyleRoleHint(attributes);
    return candidate && ALLOWED_ROLES.has(candidate) ? candidate : null;
};
exports.suggestRole = suggestRole;
//# sourceMappingURL=suggestRole.js.map