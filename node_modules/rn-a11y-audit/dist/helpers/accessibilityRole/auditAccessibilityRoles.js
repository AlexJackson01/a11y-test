"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.auditAccessibilityRoles = void 0;
const t = __importStar(require("@babel/types"));
const hasInvalidRole_1 = require("./hasInvalidRole");
const constants_1 = require("../../constants");
const suggestRole_1 = require("./suggestRole");
const auditAccessibilityRoles = (tag, attributes, path, filePath, roleTargets, shouldFix, report, prComments, options) => {
    const hasRole = attributes.some((attr) => t.isJSXAttribute(attr) &&
        t.isJSXIdentifier(attr.name) &&
        attr.name.name === "accessibilityRole");
    if (shouldFix) {
        const fileRole = (0, suggestRole_1.suggestRoleFromFilename)(options?.filePath);
        if (fileRole &&
            !options?.perFile?.seededFirstLayer &&
            (0, suggestRole_1.isTopLevelJSX)(path) &&
            !hasRole) {
            if (options?.perFile?.seededFirstLayer === false) {
                roleTargets.push({
                    tag,
                    path,
                    line: path.node.loc?.start.line || 0,
                    text: fileRole,
                });
                if (options?.perFile)
                    options.perFile.seededFirstLayer = true;
                report?.push({
                    type: "accessibilityRole",
                    tag,
                    text: fileRole,
                    location: filePath,
                });
                return;
            }
        }
        if (!hasRole) {
            const suggested = (0, suggestRole_1.suggestRole)(tag, attributes);
            if (suggested) {
                roleTargets.push({
                    tag,
                    path,
                    line: path.node.loc?.start.line || 0,
                    text: suggested,
                });
                report?.push({
                    type: "accessibilityRole",
                    tag,
                    text: suggested,
                    location: filePath,
                });
            }
        }
        return;
    }
    const invalid = (0, hasInvalidRole_1.hasInvalidRole)(tag, attributes, path);
    if (invalid && prComments) {
        const maybe = (0, suggestRole_1.suggestRole)(tag, attributes);
        const suggestion = maybe ? ` Suggested: "${maybe}".` : "";
        const message = `${constants_1.roleCode}: <${tag}> on line ${invalid.line} has an invalid accessibilityRole "${invalid.existingText}". ${suggestion}`.trim();
        prComments.push({
            type: "accessibilityRole",
            tag,
            line: invalid.line,
            text: message,
            location: filePath,
        });
    }
};
exports.auditAccessibilityRoles = auditAccessibilityRoles;
//# sourceMappingURL=auditAccessibilityRoles.js.map