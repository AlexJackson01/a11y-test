"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.auditFiles = void 0;
const fs_1 = __importDefault(require("fs"));
const prettier_1 = __importDefault(require("prettier"));
const parser_1 = require("@babel/parser");
const generator_1 = __importDefault(require("@babel/generator"));
const traverse_1 = __importDefault(require("@babel/traverse"));
const t = __importStar(require("@babel/types"));
const auditAccessibilityLabels_1 = require("./accessibilityLabel/auditAccessibilityLabels");
const addAccessibilityLabels_1 = require("./accessibilityLabel/addAccessibilityLabels");
const addAccessibilityRoles_1 = require("./accessibilityRole/addAccessibilityRoles");
const auditAccessibilityRoles_1 = require("./accessibilityRole/auditAccessibilityRoles");
const auditFiles = async (filePath, report, prComments) => {
    const code = fs_1.default.readFileSync(filePath, "utf-8");
    const ast = (0, parser_1.parse)(code, {
        sourceType: "module",
        plugins: ["jsx", "typescript"],
    });
    const labelTargets = [];
    const hintTargets = [];
    const roleTargets = [];
    (0, traverse_1.default)(ast, {
        JSXElement(path) {
            const tagNode = path.node.openingElement.name;
            if (!t.isJSXIdentifier(tagNode))
                return;
            const tag = tagNode.name;
            const attributes = path.node.openingElement.attributes;
            // Audits
            (0, auditAccessibilityLabels_1.auditAccessibilityLabels)(tag, attributes, path, filePath, labelTargets, true, report, prComments);
            // In your auditFiles.ts (first pass where shouldFix=true)
            const roleCtx = { seededFirstLayer: false };
            (0, auditAccessibilityRoles_1.auditAccessibilityRoles)(tag, attributes, path, filePath, roleTargets, 
            /* shouldFix */ true, 
            /* report */ report, 
            /* prComments */ prComments, 
            /* options */ { filePath, perFile: roleCtx });
        },
    });
    let modified = false;
    // Add labels
    for (const { path, text } of labelTargets) {
        const updated = (0, addAccessibilityLabels_1.addAccessibilityLabels)(path, text);
        if (updated)
            modified = true;
    }
    // Add roles
    for (const { path, text } of roleTargets) {
        const updated = (0, addAccessibilityRoles_1.addAccessibilityRoles)(path, text);
        if (updated)
            modified = true;
    }
    if (modified) {
        const output = (0, generator_1.default)(ast).code;
        const formatted = await prettier_1.default.format(output, { parser: "babel-ts" });
        fs_1.default.writeFileSync(filePath, formatted);
    }
};
exports.auditFiles = auditFiles;
//# sourceMappingURL=auditFiles.js.map