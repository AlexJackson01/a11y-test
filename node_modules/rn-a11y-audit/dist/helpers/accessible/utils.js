"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasInteractiveDescendant = exports.isAccessibleTrue = void 0;
const t = __importStar(require("@babel/types"));
const constants_1 = require("../../constants");
const isAccessibleTrue = (attributes) => {
    const attr = attributes.find((a) => t.isJSXAttribute(a) &&
        t.isJSXIdentifier(a.name) &&
        a.name.name === "accessible");
    if (!attr)
        return false;
    // <View accessible>   -> true
    if (!attr.value)
        return true;
    // <View accessible="true"> (rare but seen)
    if (t.isStringLiteral(attr.value)) {
        return attr.value.value.toLowerCase() === "true";
    }
    // <View accessible={true}>
    if (t.isJSXExpressionContainer(attr.value) &&
        t.isBooleanLiteral(attr.value.expression)) {
        return attr.value.expression.value === true;
    }
    return false;
};
exports.isAccessibleTrue = isAccessibleTrue;
const hasInteractiveDescendant = (path) => {
    let found = false;
    path.traverse({
        JSXElement(inner) {
            if (found)
                return;
            const name = inner.node.openingElement.name;
            if (!t.isJSXIdentifier(name))
                return;
            const tag = name.name;
            if (constants_1.touchables.includes(tag)) {
                found = true;
                inner.stop();
            }
        },
    });
    return found;
};
exports.hasInteractiveDescendant = hasInteractiveDescendant;
//# sourceMappingURL=utils.js.map