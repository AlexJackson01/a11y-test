import fs from "fs";
import chalk from "chalk";
import path from "path";
import { ReportEntry } from "../types";
import { format } from "date-fns";
import { toSentenceCase } from "../helpers/accessibilityLabel/toSentenceCase";

export const generateReport = (report: ReportEntry[]) => {
  let markdown = `# Accessibility Audit Report - ${format(new Date(), 'dd MMMM yyyy')} \n\n`;

  if (report.length === 0) {
    markdown += "âœ… No missing accessibility labels or hints found.\n";
  } else {
    const groupedByFile: Record<string, ReportEntry[]> = {};

    for (const entry of report) {
      if (!groupedByFile[entry.location]) {
        groupedByFile[entry.location] = [];
      }
      groupedByFile[entry.location].push(entry);
    }

    for (const [filePath, entries] of Object.entries(groupedByFile)) {
      markdown += `## ${filePath}\n\n`;
      for (const { type, tag, text } of entries) {
        const hasInvalidRole = type === 'accessibilityRole' && text.includes('@RN-AUDIT-ROLE');
        const isDynamic = /^\{.*\}$/.test(text);

        markdown += `- **\`<${tag}>\`** ${hasInvalidRole ? 'invalid' : 'missing'} \`${type}\`: added _${isDynamic || type === 'accessibilityRole' ? text : toSentenceCase(text)}_\n`;
      }
      markdown += `\n`;
    }
  }

  const timestamp = new Date()
    .toISOString()
    .replace(/T/, "-")
    .replace(/:/g, "")
    .replace(/\..+/, "");

  const reportsDir = path.resolve("./reports");
  fs.mkdirSync(reportsDir, { recursive: true });

  const filename = `audit-report-${timestamp}.md`;
  const filepath = path.join(reportsDir, filename);

  fs.writeFileSync(filepath, markdown);
  console.log(chalk.magenta(`ðŸ“„ Report saved to ${filepath}`));
};
