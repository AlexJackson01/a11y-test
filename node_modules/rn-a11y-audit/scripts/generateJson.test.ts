// scripts/generateJson.test.ts
import path from "path";
import { generateJson } from "./generateJson";

// Mock fs so we don't touch the real filesystem
jest.mock("fs", () => ({
  mkdirSync: jest.fn(),
  writeFileSync: jest.fn(),
}));
import fs from "fs";

describe("generateJson", () => {
  beforeAll(() => {
    // Freeze time so the date is stable
    jest.useFakeTimers();
    jest.setSystemTime(new Date("2023-01-01T12:34:56Z"));
  });

  afterAll(() => {
    jest.useRealTimers();
    jest.clearAllMocks();
  });

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("writes comments to ./reports/comments.json with correct JSON structure", () => {
    const comments = [
      {
        type: "accessibilityLabel",
        tag: "Pressable",
        line: 42,
        text: "@RN-AUDIT-LABEL: Add an accessibilityLabel",
        location: "src/screens/Example.tsx",
      },
      {
        type: "accessibilityHint",
        tag: "TouchableOpacity",
        line: 10,
        text: "@RN-AUDIT-HINT: Add an accessibilityHint",
        location: "src/components/Button.tsx",
      },
    ] as any[]; // matches LabelTargets shape used in your pipeline

    generateJson(comments);

    // Ensures the reports directory is created
    expect(fs.mkdirSync).toHaveBeenCalledWith(
      path.resolve("./reports"),
      { recursive: true }
    );

    // Ensures the file path is reports/comments.json
    const expectedPath = path.join(path.resolve("./reports"), "comments.json");
    expect(fs.writeFileSync).toHaveBeenCalledTimes(1);

    // Capture arguments used for write
    const [outPath, contents, encoding] = (fs.writeFileSync as jest.Mock).mock.calls[0];

    expect(outPath).toBe(expectedPath);
    expect(encoding).toBe("utf-8");

    // Validate JSON content
    const parsed = JSON.parse(contents);
    expect(parsed).toEqual({
      date: "2023-01-01",
      issues: comments,
    });
  });

  it("handles an empty comments array", () => {
    const comments: any[] = [];

    generateJson(comments);

    const [outPath, contents] = (fs.writeFileSync as jest.Mock).mock.calls[0];
    const parsed = JSON.parse(contents);

    expect(outPath).toBe(path.join(path.resolve("./reports"), "comments.json"));
    expect(parsed.date).toBe("2023-01-01");
    expect(parsed.issues).toEqual([]);
  });
});
