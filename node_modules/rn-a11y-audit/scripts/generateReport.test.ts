import fs from "fs";
import chalk from "chalk";
import path from "path";
import { generateReport } from "./generateReport";

jest.mock("fs");
jest.spyOn(console, "log").mockImplementation(() => {});

describe("generateReport", () => {
  beforeAll(() => {
    jest.useFakeTimers({ legacyFakeTimers: false });
    jest.setSystemTime(new Date("2023-01-01T12:34:56Z"));
  });

  afterAll(() => {
    jest.useRealTimers();
    jest.restoreAllMocks();
  });

  it("writes a markdown file with grouped entries", () => {
    const report = [
      {
        type: "accessibilityLabel" as const,
        tag: "Button",
        text: "Click me",
        location: "file1.tsx",
      },
      {
        type: "accessibilityHint" as const,
        tag: "TouchableOpacity",
        text: "Tap here",
        location: "file1.tsx",
      },
      {
        type: "accessibilityLabel" as const,
        tag: "Image",
        text: "Avatar",
        location: "file2.tsx",
      },
    ];

    generateReport(report);

    const timestamp = "2023-01-01-123456";
    const reportsDir = path.resolve("./reports");
    const expectedFilename = path.join(reportsDir, `audit-report-${timestamp}.md`);

    expect(fs.writeFileSync).toHaveBeenCalledWith(
      expectedFilename,
      expect.stringContaining("# Accessibility Audit Report")
    );
    expect(fs.writeFileSync).toHaveBeenCalledWith(
      expectedFilename,
      expect.stringContaining("## file1.tsx")
    );
    expect(fs.writeFileSync).toHaveBeenCalledWith(
      expectedFilename,
      expect.stringContaining(
        "- **`<Button>`** missing `accessibilityLabel`: added _Click me_"
      )
    );
    expect(console.log).toHaveBeenCalledWith(
      chalk.magenta(`ðŸ“„ Report saved to ${expectedFilename}`)
    );
  });

  it("writes message for empty report", () => {
    generateReport([]);

    const timestamp = "2023-01-01-123456";
    const reportsDir = path.resolve("./reports");
    const expectedFilename = path.join(reportsDir, `audit-report-${timestamp}.md`);

    expect(fs.writeFileSync).toHaveBeenCalledWith(
      expectedFilename,
      expect.stringContaining(
        "âœ… No missing accessibility labels or hints found."
      )
    );
  });
});
