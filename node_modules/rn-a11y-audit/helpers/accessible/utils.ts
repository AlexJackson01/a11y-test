import * as t from "@babel/types";
import { NodePath } from "@babel/traverse";
import { touchables } from "../../constants";

export const isAccessibleTrue = (
    attributes: (t.JSXAttribute | t.JSXSpreadAttribute)[]
  ): boolean => {
    const attr = attributes.find(
      (a): a is t.JSXAttribute =>
        t.isJSXAttribute(a) &&
        t.isJSXIdentifier(a.name) &&
        a.name.name === "accessible"
    );
    if (!attr) return false;
  
    // <View accessible>   -> true
    if (!attr.value) return true;
  
    // <View accessible="true"> (rare but seen)
    if (t.isStringLiteral(attr.value)) {
      return attr.value.value.toLowerCase() === "true";
    }
  
    // <View accessible={true}>
    if (
      t.isJSXExpressionContainer(attr.value) &&
      t.isBooleanLiteral(attr.value.expression)
    ) {
      return attr.value.expression.value === true;
    }
  
    return false;
  }
  
  export const hasInteractiveDescendant = (path: NodePath<t.JSXElement>): boolean => {
    let found = false;
    path.traverse({
      JSXElement(inner) {
        if (found) return;
        const name = inner.node.openingElement.name;
        if (!t.isJSXIdentifier(name)) return;
        const tag = name.name;
        if (touchables.includes(tag)) {
          found = true;
          inner.stop();
        }
      },
    });
    return found;
  }