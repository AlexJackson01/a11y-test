import fs from "fs";
import prettier from "prettier";
import { parse } from "@babel/parser";
import generate from "@babel/generator";
import traverse from "@babel/traverse";
import * as t from "@babel/types";

import { LabelTargets, ReportEntry } from "../types";
import { auditAccessibilityLabels } from "./accessibilityLabel/auditAccessibilityLabels";
import { addAccessibilityLabels } from "./accessibilityLabel/addAccessibilityLabels";
import { addAccessibilityRoles } from "./accessibilityRole/addAccessibilityRoles";
import { auditAccessibilityRoles } from "./accessibilityRole/auditAccessibilityRoles";

export const auditFiles = async (
  filePath: string,
  report?: ReportEntry[],
  prComments?: LabelTargets[]
) => {
  const code = fs.readFileSync(filePath, "utf-8");
  const ast = parse(code, {
    sourceType: "module",
    plugins: ["jsx", "typescript"],
  });

  const labelTargets: LabelTargets[] = [];
  const hintTargets: LabelTargets[] = [];
  const roleTargets: LabelTargets[] = [];

  traverse(ast, {
    JSXElement(path) {
      const tagNode = path.node.openingElement.name;
      if (!t.isJSXIdentifier(tagNode)) return;

      const tag = tagNode.name;
      const attributes = path.node.openingElement.attributes;

      // Audits

      auditAccessibilityLabels(
        tag,
        attributes,
        path,
        filePath,
        labelTargets,
        true,
        report,
        prComments
      );

      // In your auditFiles.ts (first pass where shouldFix=true)
      const roleCtx = { seededFirstLayer: false };
      auditAccessibilityRoles(
        tag,
        attributes,
        path,
        filePath,
        roleTargets,
        /* shouldFix */ true,
        /* report */ report,
        /* prComments */ prComments,
        /* options */ { filePath, perFile: roleCtx },
      );

    },
  });

  let modified = false;

  // Add labels
  for (const { path, text } of labelTargets) {
    const updated = addAccessibilityLabels(path, text);
    if (updated) modified = true;
  }

  // Add roles
  for (const { path, text } of roleTargets) {
    const updated = addAccessibilityRoles(path, text);
    if (updated) modified = true;
  }

  if (modified) {
    const output = generate(ast).code;
    const formatted = await prettier.format(output, { parser: "babel-ts" });
    fs.writeFileSync(filePath, formatted);
  }
};
