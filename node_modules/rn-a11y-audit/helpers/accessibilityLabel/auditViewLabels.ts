import * as t from "@babel/types";
import { NodePath } from "@babel/traverse";
import { extractTextFromJSX } from "./extractTextFromJSX";
import { hasProp } from "../hasProp";
import { LabelTargets } from "../../types";
import { viewLabelError } from "../../constants";

export const auditViewLabels = (
  tag: string,
  attributes: (t.JSXAttribute | t.JSXSpreadAttribute)[],
  path: NodePath<t.JSXElement>
): LabelTargets | null => {
  if (tag !== "View") return null;
  if (!hasProp("accessible", attributes)) return null;
  if (hasProp("accessibilityLabel", attributes)) return null;

  let textChildCount = 0;

  path.traverse({
    JSXElement(innerPath) {
      const opening = innerPath.node.openingElement.name;
      if (t.isJSXIdentifier(opening) && opening.name === "Text") {
        textChildCount += 1;
      }
    },
  });

  const extractedText =
  textChildCount === 0 || textChildCount > 1
      ? viewLabelError
      : extractTextFromJSX(path) || viewLabelError;

  return {
    tag,
    path,
    line: path.node.loc?.start.line || 0,
    text: extractedText,
  };
};
