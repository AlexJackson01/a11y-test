import { parse } from "@babel/parser";
import traverse, { NodePath } from "@babel/traverse";
import * as t from "@babel/types";
import { auditViewLabels } from "./auditViewLabels";

const getJSXElementPath = (code: string): NodePath<t.JSXElement> => {
  const ast = parse(code, {
    sourceType: "module",
    plugins: ["jsx", "typescript"],
  });

  let elementPath: NodePath<t.JSXElement> | null = null;

  traverse(ast, {
    JSXElement(path) {
      elementPath = path;
      path.stop(); // Get the first JSXElement only
    },
  });

  if (!elementPath) {
    throw new Error("JSXElement not found");
  }

  return elementPath;
};

describe("auditViewLabels", () => {
  it("returns null if tag is not View", () => {
    const code = `<Text accessible />`;
    const path = getJSXElementPath(code);
    const result = auditViewLabels("Text", path.node.openingElement.attributes, path);
    expect(result).toBeNull();
  });

  it("returns null if accessible is not present", () => {
    const code = `<View><Text>Hello</Text></View>`;
    const path = getJSXElementPath(code);
    const result = auditViewLabels("View", path.node.openingElement.attributes, path);
    expect(result).toBeNull();
  });

  it("returns null if accessibilityLabel is present", () => {
    const code = `<View accessible accessibilityLabel="Hello"><Text>Hello</Text></View>`;
    const path = getJSXElementPath(code);
    const result = auditViewLabels("View", path.node.openingElement.attributes, path);
    expect(result).toBeNull();
  });

  it("extracts label if accessible is present and only one Text child", () => {
    const code = `<View accessible><Text>Hello</Text></View>`;
    const path = getJSXElementPath(code);
    const result = auditViewLabels("View", path.node.openingElement.attributes, path);
    expect(result?.text).toBe("Hello");
  });

  it("returns fallback label if multiple Text children are present", () => {
    const code = `
      <View accessible>
        <Text>First</Text>
        <Text>Second</Text>
      </View>
    `;
    const path = getJSXElementPath(code);
    const result = auditViewLabels("View", path.node.openingElement.attributes, path);
    expect(result?.text).toMatch(/@RN-AUDIT-LABEL/);
  });

  it("returns fallback label if no Text child is present", () => {
    const code = `<View accessible><Image /></View>`;
    const path = getJSXElementPath(code);
    const result = auditViewLabels("View", path.node.openingElement.attributes, path);
    expect(result?.text).toMatch(/@RN-AUDIT-LABEL/);
  });
});
