import { parse } from "@babel/parser";
import traverse, { NodePath } from "@babel/traverse";
import * as t from "@babel/types";
import { extractTextFromJSX } from "./extractTextFromJSX";

function getJSXElementNode(code: string): NodePath<t.JSXElement> | null {
  const ast = parse(code, {
    sourceType: "module",
    plugins: ["jsx", "typescript"],
  });

  let jsxPath: NodePath<t.JSXElement> | null = null;

  traverse(ast, {
    JSXElement(path) {
      jsxPath = path;
      path.stop();
    },
  });

  return jsxPath;
}

describe("extractTextFromJSX", () => {
  it("extracts plain JSXText inside <Text>", () => {
    const code = `<TouchableOpacity><Text>Hello World</Text></TouchableOpacity>`;
    const jsxPath = getJSXElementNode(code);
    expect(jsxPath).not.toBeNull();

    const label = extractTextFromJSX(jsxPath!);
    expect(label).toBe("Hello World");
  });

  it("extracts expression container with identifier inside <Text>", () => {
    const code = `<TouchableOpacity><Text>{myLabel}</Text></TouchableOpacity>`;
    const jsxPath = getJSXElementNode(code);
    expect(jsxPath).not.toBeNull();

    const label = extractTextFromJSX(jsxPath!);
    expect(label).toBe("{myLabel}");
  });

  it("extracts expression container with string literal inside <Text>", () => {
    const code = `<TouchableOpacity><Text>{"Literal String"}</Text></TouchableOpacity>`;
    const jsxPath = getJSXElementNode(code);
    expect(jsxPath).not.toBeNull();

    const label = extractTextFromJSX(jsxPath!);
    expect(label).toBe("Literal String");
  });

  it("returns empty string when no <Text> element is present", () => {
    const code = `<Button title="Click me" />`;
    const jsxPath = getJSXElementNode(code);
    expect(jsxPath).not.toBeNull();

    const label = extractTextFromJSX(jsxPath!);
    expect(label).toBe("");
  });

  it("returns first non-empty text in nested <Text>", () => {
    const code = `
      <TouchableOpacity>
        <Text>First</Text>
        <Text>Second</Text>
      </TouchableOpacity>
    `;
    const jsxPath = getJSXElementNode(code);
    expect(jsxPath).not.toBeNull();

    const label = extractTextFromJSX(jsxPath!);
    expect(label).toBe("First");
  });
});
