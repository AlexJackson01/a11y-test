// addAccessibilityLabels.test.ts
import * as t from "@babel/types";
import { addAccessibilityLabels } from "./addAccessibilityLabels";
import { toSentenceCase } from "./toSentenceCase";

jest.mock("./toSentenceCase");

describe("addAccessibilityLabels", () => {
  let path: any;

  beforeEach(() => {
    jest.clearAllMocks();
    path = {
      node: {
        openingElement: {
          attributes: [],
        },
      },
    };
  });

  it("adds a stringLiteral accessibilityLabel when labelText is static", () => {
    (toSentenceCase as jest.Mock).mockReturnValue("Submit");

    const result = addAccessibilityLabels(path, "submit");

    expect(result).toBe(true);
    expect(path.node.openingElement.attributes).toHaveLength(1);

    const attr = path.node.openingElement.attributes[0];
    expect(attr.type).toBe("JSXAttribute");
    expect(attr.name.name).toBe("accessibilityLabel");
    expect(t.isStringLiteral(attr.value)).toBe(true);
    expect((attr.value as t.StringLiteral).value).toBe("Submit");
  });

  it("adds a jsxExpressionContainer accessibilityLabel when labelText is dynamic", () => {
    // toSentenceCase won't be used for dynamic, but mocking is fine
    (toSentenceCase as jest.Mock).mockReturnValue("{dynamicLabel}");

    const result = addAccessibilityLabels(path, "{dynamicLabel}");

    expect(result).toBe(true);
    expect(path.node.openingElement.attributes).toHaveLength(1);

    const attr = path.node.openingElement.attributes[0] as t.JSXAttribute;
    expect(attr.type).toBe("JSXAttribute");
    expect((attr.name as t.JSXIdentifier).name).toBe("accessibilityLabel");
    expect(t.isJSXExpressionContainer(attr.value)).toBe(true);

    const expr = (attr.value as t.JSXExpressionContainer).expression;
    expect(t.isIdentifier(expr)).toBe(true);
    expect((expr as t.Identifier).name).toBe("dynamicLabel");
  });
});
