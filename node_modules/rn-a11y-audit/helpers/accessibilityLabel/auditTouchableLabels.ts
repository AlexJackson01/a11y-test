import * as t from "@babel/types";
import { extractTextFromJSX } from "./extractTextFromJSX";
import { hasProp } from "../hasProp";
import { LabelTargets } from "../../types";
import { NodePath } from "@babel/traverse";
import { touchableLabelError, touchables } from "../../constants";
import generate from "@babel/generator";

const isTouchable = (tag: string) => touchables.includes(tag);

export const auditTouchableLabels = (
  tag: string,
  attributes: (t.JSXAttribute | t.JSXSpreadAttribute)[],
  path: NodePath<t.JSXElement>
): LabelTargets | null => {
  if (!isTouchable(tag) || hasProp("accessibilityLabel", attributes)) {
    return null;
  }

  const titleAttr = attributes.find(
    (attr): attr is t.JSXAttribute =>
      t.isJSXAttribute(attr) &&
      t.isJSXIdentifier(attr.name) &&
      attr.name.name === "title"
  );

  let extractedText: string | null = null;

  if (titleAttr?.value) {
    const val = titleAttr.value;

    if (t.isStringLiteral(val)) {
      // title="Save"
      extractedText = val.value;
    } else if (t.isJSXExpressionContainer(val)) {
      const expr = val.expression;

      if (t.isIdentifier(expr)) {
        // title={title}
        extractedText = `{${expr.name}}`;
      } else {
        // title={props.title} / title={this.props.title} / title={func()} / title={tern ? ary : null}
        extractedText = `{${generate(expr).code}}`;
      
      }
    }
  }

  if (!extractedText) {
    extractedText = extractTextFromJSX(path) || touchableLabelError;
  }

  return {
    tag,
    path,
    line: path.node.loc?.start.line || 0,
    text: extractedText,
  };
};
