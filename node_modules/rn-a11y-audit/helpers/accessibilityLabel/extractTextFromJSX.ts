import { NodePath } from "@babel/traverse";
import * as t from "@babel/types";
import generate from "@babel/generator";

export const extractTextFromJSX = (path: NodePath<t.JSXElement>) => {
  let label = "";

  path.traverse({
    JSXElement(innerPath) {
      const opening = innerPath.node.openingElement;

      if (!t.isJSXIdentifier(opening.name)) return;

      const openingTag = opening.name.name;

      // Only inspect <Text> components
      if (openingTag === "Text") {
        const children = innerPath.node.children;

        for (const child of children) {
          if (t.isJSXText(child)) {
            // <Text>Hello</Text>
            const trimmed = child.value.trim();
            if (trimmed.length > 0) {
              label = trimmed;
              innerPath.stop();
              break;
            }
          } else if (t.isJSXExpressionContainer(child)) {
            const expr = child.expression;

            if (t.isIdentifier(expr)) {
              // <Text>{variable}</Text>
              label = `{${expr.name}}`;
              innerPath.stop();
              break;
            } else if (t.isStringLiteral(expr)) {
              // <Text>{"Static string"}</Text>
              label = expr.value;
              innerPath.stop();
              break;
            } else {
              // Complex expressions (ternary, function call, member expr etc)
              label = `{${generate(expr).code}}`;
              innerPath.stop();
              break;
            }
          }
        }
      }
    },
  });

  return label;
};
