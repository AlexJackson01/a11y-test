import chalk from "chalk";
import { LabelTargets } from "../../types";
import { auditImageLabels } from "./auditImageLabels";
import { auditViewLabels } from "./auditViewLabels";
import { auditTouchableLabels } from "./auditTouchableLabels";
import { labelCode } from "../../constants";
import * as t from "@babel/types";
import { hasProp } from "../hasProp";

export const auditAccessibilityLabels = (
  tag: string,
  attributes: any[],
  path: any,
  filePath: string,
  labelTargets: LabelTargets[],
  shouldFix: boolean,
  report?: any[],
  prComments?: any[]
) => {
  let labelResult: LabelTargets | null = null;

  switch (true) {
    case tag === "Image":
      labelResult = auditImageLabels(attributes, path);
      break;
    case tag === "View":
      labelResult = auditViewLabels(tag, attributes, path);
      break;
    default:
      labelResult = auditTouchableLabels(tag, attributes, path);
  }

  const autoFixes = !labelResult?.text.includes(labelCode);

  if (labelResult) {
    if (shouldFix && autoFixes) {
      labelTargets.push(labelResult);

      if (report) {
        report.push({
          type: "accessibilityLabel",
          tag,
          text: labelResult.text,
          location: filePath,
        });
      }
    } else {
      if (
        prComments &&
        !hasProp("accessibilityLabel", attributes)
      ) {
        prComments.push({
          type: "accessibilityLabel",
          tag,
          line: labelResult.line,
          text: labelResult.text,
          location: filePath,
        });

        console.log(
          chalk.yellow(
            `ðŸŸ¡ ${filePath}: <${tag}> on line ${labelResult.line} missing accessibilityLabel`
          )
        );
      }
    }
  }
};
