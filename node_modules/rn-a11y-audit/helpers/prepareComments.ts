import fs from "fs";
import { parse } from "@babel/parser";
import traverse from "@babel/traverse";
import * as t from "@babel/types";
import { generateJson } from "../scripts/generateJson";
import { LabelTargets, ReportEntry } from "../types";
import { auditAccessibilityLabels } from "./accessibilityLabel/auditAccessibilityLabels";
import { auditAccessibilityHints } from "./accessibilityHint/auditAccessibilityHints";
import { auditAccessibilityRoles } from "./accessibilityRole/auditAccessibilityRoles";
import { auditAccessibilityStates } from "./accessibilityState/auditAccessibilityStates";
import { auditAccessible } from "./accessible/auditAccessible";
// import { auditAccessibilityHints } from "./accessibilityHint/auditAccessibilityHints";
// import { addAccessibilityLabels } from "./accessibilityLabel/addAccessibilityLabels";
// import { addAccessibilityHints } from "./accessibilityHint/addAccessibilityHints";
// import { addAccessibilityRoles } from "./accessibilityRole/addAccessibilityRoles";
// import { auditAccessibilityRoles } from "./accessibilityRole/auditAccessibilityRoles";

export const prepareComments = async (
  filePath: string,
  prComments: ReportEntry[]
) => {
  const code = fs.readFileSync(filePath, "utf-8");
  const ast = parse(code, {
    sourceType: "module",
    plugins: ["jsx", "typescript"],
  });

  // const labelTargets: LabelTargets[] = [];
  // const hintTargets: LabelTargets[] = [];
  // const roleTargets: LabelTargets[] = [];

  traverse(ast, {
    JSXElement(path) {
      const tagNode = path.node.openingElement.name;
      if (!t.isJSXIdentifier(tagNode)) return;

      const tag = tagNode.name;
      const attributes = path.node.openingElement.attributes;

      // Audits

      auditAccessibilityLabels(
        tag,
        attributes,
        path,
        filePath,
        [],
        false,
        [],
        prComments
      );

      auditAccessibilityHints(tag, attributes, path, filePath, prComments);

      auditAccessibilityRoles(
        tag,
        attributes,
        path,
        filePath,
        [],
        false,
        [],
        prComments
      );

      const roleCtx = { seededFirstLayer: false };
      auditAccessibilityStates(tag, attributes, path, filePath, prComments, {
        filePath,
        perFile: roleCtx,
      });

      auditAccessible(tag, attributes, path, filePath, prComments);
    },
  });

  generateJson(prComments);
};
