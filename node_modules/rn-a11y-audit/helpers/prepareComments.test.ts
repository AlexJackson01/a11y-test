// helpers/prepareComments.test.ts
import { prepareComments } from "./prepareComments";

// --- Mocks ---
jest.mock("fs", () => ({
  readFileSync: jest.fn(),
}));

jest.mock("../scripts/generateJson", () => ({
  generateJson: jest.fn(),
}));

jest.mock("./accessibilityLabel/auditAccessibilityLabels", () => ({
  auditAccessibilityLabels: jest.fn((tag: string, _attrs: any[], path: any, filePath: string, _lt: any[], _fix: boolean, _report: any[], prComments: any[]) => {
    // Simulate label auditor only pushing for Pressable
    if (tag === "Pressable") {
      prComments.push({
        type: "accessibilityLabel",
        tag,
        line: path.node.loc?.start.line || 0,
        text: "@RN-AUDIT-LABEL: Add an accessibilityLabel",
        location: filePath,
      });
    }
  }),
}));

jest.mock("./accessibilityHint/auditAccessibilityHints", () => ({
  auditAccessibilityHints: jest.fn((tag: string, _attrs: any[], path: any, filePath: string, prComments: any[]) => {
    // Simulate hint auditor only pushing for Pressable
    if (tag === "Pressable") {
      prComments.push({
        type: "accessibilityHint",
        tag,
        line: path.node.loc?.start.line || 0,
        text: "@RN-AUDIT-HINT: Add an accessibilityHint",
        location: filePath,
      });
    }
  }),
}));

jest.mock("./accessibilityRole/auditAccessibilityRoles", () => ({
  auditAccessibilityRoles: jest.fn((tag: string, _attrs: any[], path: any, filePath: string, _rt: any[], _fix: boolean, _report: any[], prComments: any[]) => {
    // Simulate role auditor pushing for Image (e.g., invalid role, or suggestion)
    if (tag === "Image") {
      prComments.push({
        type: "accessibilityRole",
        tag,
        line: path.node.loc?.start.line || 0,
        text: "@RN-AUDIT-ROLE: Suggest a role",
        location: filePath,
      });
    }
  }),
}));

import fs from "fs";
import { generateJson } from "../scripts/generateJson";
import { auditAccessibilityLabels } from "./accessibilityLabel/auditAccessibilityLabels";
import { auditAccessibilityHints } from "./accessibilityHint/auditAccessibilityHints";
import { auditAccessibilityRoles } from "./accessibilityRole/auditAccessibilityRoles";

describe("prepareComments", () => {
  const filePath = "/app/screens/Example.tsx";

  beforeEach(() => {
    jest.clearAllMocks();

    // Feed a small RN component with several JSX elements
    (fs.readFileSync as jest.Mock).mockReturnValue(`
      import React from 'react';
      import { View, Text, Pressable, Image } from 'react-native';

      export default function Example() {
        return (
          <>
            <View><Text>Hi</Text></View>
            <Pressable />
            <Image />
          </>
        );
      }
    `);
  });

  it("collects PR comments from all auditors and calls generateJson", async () => {
    const prComments: any[] = [];

    await prepareComments(filePath, prComments);

    // Auditors were invoked
    expect(auditAccessibilityLabels).toHaveBeenCalled();
    expect(auditAccessibilityHints).toHaveBeenCalled();
    expect(auditAccessibilityRoles).toHaveBeenCalled();

    // We expect 3 items: one label + one hint for Pressable, one role for Image
    expect(prComments).toHaveLength(3);

    // Basic shape checks
    const types = prComments.map((c) => c.type).sort();
    expect(types).toEqual(["accessibilityHint", "accessibilityLabel", "accessibilityRole"].sort());

    // All entries should include location and a line number
    for (const c of prComments) {
      expect(c.location).toBe(filePath);
      expect(typeof c.line).toBe("number");
    }

    // generateJson called with the final prComments array
    expect(generateJson).toHaveBeenCalledTimes(1);
    expect(generateJson).toHaveBeenCalledWith(prComments);
  });

  it("handles an empty file gracefully (no JSX)", async () => {
    (fs.readFileSync as jest.Mock).mockReturnValue(`export const x = 1;`);

    const prComments: any[] = [];
    await prepareComments(filePath, prComments);

    expect(auditAccessibilityLabels).not.toHaveBeenCalled();
    expect(auditAccessibilityHints).not.toHaveBeenCalled();
    expect(auditAccessibilityRoles).not.toHaveBeenCalled();

    expect(prComments).toHaveLength(0);
    expect(generateJson).toHaveBeenCalledWith(prComments);
  });
});
