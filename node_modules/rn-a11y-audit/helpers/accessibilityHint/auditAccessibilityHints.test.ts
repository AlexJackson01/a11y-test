// auditAccessibilityHints.test.ts
import { auditAccessibilityHints } from "./auditAccessibilityHints";
import { touchableHintError } from "../../constants";

// Mock hasProp so we can control presence/absence of accessibilityHint
jest.mock("../hasProp", () => ({
  hasProp: jest.fn(),
}));
import { hasProp } from "../hasProp";

// Mock chalk.yellow so we can assert on the exact log string
jest.mock("chalk", () => ({
  yellow: (s: string) => s,
}));

describe("auditAccessibilityHints", () => {
  const filePath = "testFile.tsx";
  // Minimal NodePath-like shape with a loc so line can be read
  const mockPath = { node: { loc: { start: { line: 12 } } } } as any;

  beforeEach(() => {
    jest.clearAllMocks();
    jest.spyOn(console, "log").mockImplementation(() => {});
  });

  it("pushes a PR comment and logs when touchable is missing accessibilityHint", () => {
    // Simulate no accessibilityHint prop found
    (hasProp as jest.Mock).mockReturnValue(false);

    const prComments: any[] = [];

    auditAccessibilityHints(
      "TouchableOpacity",
      [],        // attributes
      mockPath,  // path with line info
      filePath,
      prComments
    );

    expect(prComments).toEqual([
      {
        type: "accessibilityHint",
        tag: "TouchableOpacity",
        line: 12,
        text: touchableHintError,
        location: filePath,
      },
    ]);

    expect(console.log).toHaveBeenCalledWith(
      `ðŸŸ¡ ${filePath}: <TouchableOpacity> on line 12 missing accessibilityHint`
    );
  });

  it("does nothing when element already has accessibilityHint", () => {
    (hasProp as jest.Mock).mockReturnValue(true); // found prop

    const prComments: any[] = [];

    auditAccessibilityHints(
      "Pressable",
      [],        // attributes
      mockPath,
      filePath,
      prComments
    );

    expect(prComments).toHaveLength(0);
    expect(console.log).not.toHaveBeenCalled();
  });

  it("does nothing for non-touchable elements (e.g., Image)", () => {
    (hasProp as jest.Mock).mockReturnValue(false);

    const prComments: any[] = [];

    auditAccessibilityHints(
      "Image",
      [],
      mockPath,
      filePath,
      prComments
    );

    expect(prComments).toHaveLength(0);
    expect(console.log).not.toHaveBeenCalled();
  });
});
