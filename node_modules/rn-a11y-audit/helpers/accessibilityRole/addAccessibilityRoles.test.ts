import * as t from "@babel/types";
import type { NodePath } from "@babel/traverse";
import { addAccessibilityRoles } from "./addAccessibilityRoles";

describe("addAccessibilityRoles", () => {
  // Minimal NodePath-like object with just what's needed by the helper
  const makePath = (initialAttrs: (t.JSXAttribute | t.JSXSpreadAttribute)[] = []) =>
    ({
      node: {
        openingElement: {
          attributes: initialAttrs,
        },
      },
    } as unknown as NodePath<t.JSXElement>);

  it("adds accessibilityRole attribute when none exists", () => {
    const path = makePath();

    const result = addAccessibilityRoles(path, "button");
    expect(result).toBe(true);

    const attrs = path.node.openingElement.attributes;
    expect(attrs).toHaveLength(1);

    const roleAttr = attrs[0] as t.JSXAttribute;
    expect(roleAttr.type).toBe("JSXAttribute");
    expect((roleAttr.name as t.JSXIdentifier).name).toBe("accessibilityRole");
    expect(t.isStringLiteral(roleAttr.value)).toBe(true);
    expect((roleAttr.value as t.StringLiteral).value).toBe("button");
  });

  it("appends a new accessibilityRole even if one already exists (does not overwrite)", () => {
    const existing = t.jsxAttribute(
      t.jsxIdentifier("accessibilityRole"),
      t.stringLiteral("image")
    );
    const path = makePath([existing]);

    const result = addAccessibilityRoles(path, "link");
    expect(result).toBe(true);

    const attrs = path.node.openingElement.attributes;
    expect(attrs).toHaveLength(2);

    const last = attrs[attrs.length - 1] as t.JSXAttribute;
    expect((last.name as t.JSXIdentifier).name).toBe("accessibilityRole");
    expect(t.isStringLiteral(last.value)).toBe(true);
    expect((last.value as t.StringLiteral).value).toBe("link");
  });

  it("supports any valid role string", () => {
    const path = makePath();

    addAccessibilityRoles(path, "checkbox");
    const attr = path.node.openingElement.attributes[0] as t.JSXAttribute;

    expect((attr.name as t.JSXIdentifier).name).toBe("accessibilityRole");
    expect((attr.value as t.StringLiteral).value).toBe("checkbox");
  });
});
