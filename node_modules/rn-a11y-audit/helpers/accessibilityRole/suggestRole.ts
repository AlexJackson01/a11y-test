import * as t from "@babel/types";
import pathMod from "path";
import type { NodePath } from "@babel/traverse";
import { roleMap, touchables } from "../../constants";

const ALLOWED_ROLES = new Set(Object.values(roleMap));

const HEADER_KEYS = /(^h[1-6]$|header|heading|title)/i;
const isHeaderKey = (k: string) => HEADER_KEYS.test(k);

export const isTopLevelJSX = (path: NodePath<t.JSXElement>): boolean =>
  !path.findParent((p) => p.isJSXElement());

const extractStyleRoleHint = (
  attributes: (t.JSXAttribute | t.JSXSpreadAttribute)[]
): string | null => {
  const styleAttr = attributes.find(
    (attr): attr is t.JSXAttribute =>
      t.isJSXAttribute(attr) &&
      t.isJSXIdentifier(attr.name) &&
      attr.name.name === "style"
  );
  if (!styleAttr || !styleAttr.value) return null;

  // style="header"
  if (t.isStringLiteral(styleAttr.value)) {
    return isHeaderKey(styleAttr.value.value) ? "header" : null;
  }

  if (!t.isJSXExpressionContainer(styleAttr.value)) return null;
  const expr = styleAttr.value.expression;

  // style={styles.header} | style={theme.title}
  if (t.isMemberExpression(expr) && t.isIdentifier(expr.property)) {
    return isHeaderKey(expr.property.name) ? "header" : null;
  }

  // style={"header"}
  if (t.isStringLiteral(expr)) {
    return isHeaderKey(expr.value) ? "header" : null;
  }

  // style={[styles.header, "title", styles.something]}
  if (t.isArrayExpression(expr)) {
    for (const el of expr.elements) {
      if (t.isMemberExpression(el) && t.isIdentifier(el.property)) {
        if (isHeaderKey(el.property.name)) return "header";
      }
      if (t.isStringLiteral(el) && isHeaderKey(el.value)) return "header";
    }
  }

  // style={{ variant: 'heading' }} / { title: true }
  if (t.isObjectExpression(expr)) {
    for (const prop of expr.properties) {
      if (!t.isObjectProperty(prop)) continue;
      const key =
        t.isIdentifier(prop.key)
          ? prop.key.name
          : t.isStringLiteral(prop.key)
          ? prop.key.value
          : "";
      if (key && isHeaderKey(key)) return "header";
      if (t.isStringLiteral(prop.value) && isHeaderKey(prop.value.value)) {
        return "header";
      }
    }
  }

  return null;
};

export const suggestRoleFromTagName = (tag: string): string | null => {
  if (roleMap[tag]) return roleMap[tag];

  const lower = tag.toLowerCase();

  if (touchables.filter(tag => tag !== 'Button').includes(tag)) return "button";

  if (/imagebutton|avatar/.test(lower)) return "imagebutton";
  if (/checkbox/.test(lower)) return "checkbox";
  if (/radio(?!group)/.test(lower)) return "radio";
  if (/toggle(button)?|toggle/.test(lower)) return "togglebutton";
  if (/dropdown|picker|combo/.test(lower)) return "combobox";
  if (/progressbar|progress|spinner/.test(lower)) return "progressbar";
  if (/search/.test(lower)) return "search";
  if (/header|heading|title|^h[1-6]$/.test(lower)) return "header";
  if (/toolbar/.test(lower)) return "toolbar";
  if (/tab(?!list)/.test(lower)) return "tab";
  if (/menu/.test(lower)) return "menu";
  if (/summary/.test(lower)) return "summary";
  if (/timer|countdown/.test(lower)) return "timer";
  if (/link/.test(lower)) return "link";
  if (/grid/.test(lower)) return "grid";
  if (/list/.test(lower)) return "list";
  if (/switch/.test(lower)) return "switch";
  if (/image|icon/.test(lower)) return "image";
  if (/slider|carousel/.test(lower)) return "adjustable";
  if (/alert|toast/.test(lower)) return "alert";

  return null;
};

export const suggestRoleFromFilename = (filePath?: string): string | null => {
  if (!filePath) return null;
  const base = pathMod.basename(filePath).toLowerCase();

  if (touchables.filter(tag => tag !== 'Button').includes(base)) return "button";

  if (/checkbox/.test(base)) return "checkbox";
  if (/radio(?!group)/.test(base)) return "radio";
  if (/dropdown|picker|combo/.test(base)) return "combobox";
  if (/toggle(button)?|toggle/.test(base)) return "togglebutton";
  if (/search/.test(base)) return "search";
  if (/progressbar|progress|spinner/.test(base)) return "progressbar";
  if (/header|heading|title|^h[1-6]/.test(base)) return "header";
  if (/toolbar/.test(base)) return "toolbar";
  if (/tab(?!list)/.test(base)) return "tab";
  if (/menu/.test(base)) return "menu";
  if (/summary/.test(base)) return "summary";
  if (/timer|countdown/.test(base)) return "timer";
  if (/link/.test(base)) return "link";
  if (/grid/.test(base)) return "grid";
  if (/list/.test(base)) return "list";
  if (/switch/.test(base)) return "switch";
  if (/image|icon/.test(base)) return "image";
  if (/slider|carousel/.test(base)) return "adjustable";
  if (/alert|toast/.test(base)) return "alert";

  return null;
};

export const suggestRole = (
  tag: string,
  attributes: (t.JSXAttribute | t.JSXSpreadAttribute)[]
): string | null => {
  const candidate = suggestRoleFromTagName(tag) ?? extractStyleRoleHint(attributes);
  return candidate && ALLOWED_ROLES.has(candidate) ? candidate : null;
};
