import * as t from "@babel/types";
import { FileOptions, LabelTargets } from "../../types";
import { hasInvalidRole } from "./hasInvalidRole";
import { roleCode } from "../../constants";
import {
  isTopLevelJSX,
  suggestRole,
  suggestRoleFromFilename,
} from "./suggestRole";
import type { NodePath } from "@babel/traverse";

export const auditAccessibilityRoles = (
  tag: string,
  attributes: (t.JSXAttribute | t.JSXSpreadAttribute)[],
  path: NodePath<t.JSXElement>,
  filePath: string,
  roleTargets: LabelTargets[],
  shouldFix: boolean,
  report?: any[],
  prComments?: any[],
  options?: FileOptions
) => {
  const hasRole = attributes.some(
    (attr) =>
      t.isJSXAttribute(attr) &&
      t.isJSXIdentifier(attr.name) &&
      attr.name.name === "accessibilityRole"
  );

  if (shouldFix) {
    const fileRole = suggestRoleFromFilename(options?.filePath);
    if (
      fileRole &&
      !options?.perFile?.seededFirstLayer &&
      isTopLevelJSX(path) &&
      !hasRole
    ) {
      if (options?.perFile?.seededFirstLayer === false) {
        roleTargets.push({
          tag,
          path,
          line: path.node.loc?.start.line || 0,
          text: fileRole,
        });

        if (options?.perFile) options.perFile.seededFirstLayer = true;

        report?.push({
          type: "accessibilityRole",
          tag,
          text: fileRole,
          location: filePath,
        });
        return;
      }
    }

    if (!hasRole) {
      const suggested = suggestRole(tag, attributes);

      if (suggested) {
        roleTargets.push({
          tag,
          path,
          line: path.node.loc?.start.line || 0,
          text: suggested,
        });

        report?.push({
          type: "accessibilityRole",
          tag,
          text: suggested,
          location: filePath,
        });
      }
    }

    return;
  }

  const invalid = hasInvalidRole(tag, attributes, path);

  if (invalid && prComments) {
    const maybe = suggestRole(tag, attributes);
    const suggestion = maybe ? ` Suggested: "${maybe}".` : "";
    const message =
      `${roleCode}: <${tag}> on line ${invalid.line} has an invalid accessibilityRole "${invalid.existingText}". ${suggestion}`.trim();

    prComments.push({
      type: "accessibilityRole",
      tag,
      line: invalid.line,
      text: message,
      location: filePath,
    });
  }
};
