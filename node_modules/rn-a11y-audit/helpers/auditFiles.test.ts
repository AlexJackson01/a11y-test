import { vol } from "memfs";
import * as fs from "fs";
import path from "path";
import { auditFiles } from "./auditFiles";

jest.mock("fs", () => require("memfs").fs);

describe("auditFiles", () => {
  const testFilePath = "/test/TestComponent.tsx";

  beforeEach(() => {
    vol.reset();
  });

  it("adds accessibilityLabel from title prop", async () => {
    const code = `
      import { Button } from "react-native";
      export default function Test() {
        return <Button title="Click me" />;
      }
    `;
    vol.fromJSON({ [testFilePath]: code });

    await auditFiles(testFilePath);
    const output = fs.readFileSync(testFilePath, "utf-8");
    expect(output).toMatch(/accessibilityLabel="Click me"/);
  });

  it("adds accessibilityLabel from nested Text if no title prop", async () => {
    const code = `
      import { TouchableOpacity, Text } from "react-native";
      export default function Test() {
        return <TouchableOpacity><Text>Submit</Text></TouchableOpacity>;
      }
    `;
    vol.fromJSON({ [testFilePath]: code });

    await auditFiles(testFilePath);
    const output = fs.readFileSync(testFilePath, "utf-8");
    expect(output).toMatch(/accessibilityLabel="Submit"/);
  });

  it("skips element if accessibilityLabel already exists", async () => {
    const code = `
      import { Button } from "react-native";
      export default function Test() {
        return <Button accessibilityLabel="Already set" />;
      }
    `;
    vol.fromJSON({ [testFilePath]: code });

    await auditFiles(testFilePath);
    const output = fs.readFileSync(testFilePath, "utf-8");
    expect(output).toMatch(/accessibilityLabel="Already set"/);
    expect(output).not.toMatch(/To be reviewed/);
  });

  it("adds accessibilityLabel to accessible View with one Text", async () => {
    const code = `
      import { View, Text } from "react-native";
      export default function Test() {
        return <View accessible><Text>Dashboard</Text></View>;
      }
    `;
    vol.fromJSON({ [testFilePath]: code });

    await auditFiles(testFilePath);
    const output = fs.readFileSync(testFilePath, "utf-8");
    expect(output).toMatch(/accessibilityLabel="Dashboard"/);
  });

  it("adds accessibilityLabel to Image with alt prop", async () => {
    const code = `
      import { Image } from "react-native";
      export default function Test() {
        return <Image alt="User avatar" />;
      }
    `;
    vol.fromJSON({ [testFilePath]: code });

    await auditFiles(testFilePath);
    const output = fs.readFileSync(testFilePath, "utf-8");
    expect(output).toMatch(/accessibilityLabel="User avatar"/);
  });
});
